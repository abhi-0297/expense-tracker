{"version":3,"sources":["context/AppReducer.js","context/Globalstate.js","component/Header.js","component/AddTransection.js","component/transection.js","component/List.js","App.js","serviceWorker.js","index.js"],"names":["state","action","type","loading","transactions","payload","filter","transaction","_id","error","initialState","GlobalContext","createContext","GlobalProvider","children","useReducer","AppReducer","dispatch","a","axios","get","res","data","response","id","delete","config","headers","post","Provider","value","getTransactions","deleteTransaction","addTransaction","Header","Balance","total","useContext","map","amount","reduce","acc","item","toFixed","className","AddTransaction","useState","title","setTitle","setAmount","note","setNote","date","setDate","style","margin","onSubmit","e","preventDefault","newTransaction","Math","floor","random","FormGroup","Col","sm","Input","name","placeholder","onChange","target","Button","color","Transaction","Card","backgroundColor","CardBody","CardTitle","CardText","fontSize","onClick","TransactionList","useEffect","key","App","Container","fluid","Jumbotron","marginBottom","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"+SAAe,WAACA,EAAOC,GACrB,OAAQA,EAAOC,MACb,IAAK,mBACH,OAAO,2BACFF,GADL,IAEEG,SAAS,EACTC,aAAcH,EAAOI,UAEzB,IAAK,qBACH,OAAO,2BACFL,GADL,IAEEI,aAAcJ,EAAMI,aAAaE,QAC/B,SAAAC,GAAW,OAAIA,EAAYC,MAAQP,EAAOI,aAGhD,IAAK,kBACH,OAAO,2BACFL,GADL,IAEEI,aAAa,GAAD,mBAAMJ,EAAMI,cAAZ,CAA0BH,EAAOI,YAEjD,IAAK,oBACH,OAAO,2BACFL,GADL,IAEES,MAAOR,EAAOI,UAElB,QACE,OAAOL,I,iBCpBPU,EAAe,CACnBN,aAAc,GACdK,MAAO,KACPN,SAAS,GAIEQ,EAAgBC,wBAAcF,GAG9BG,EAAiB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACpBC,qBAAWC,EAAYN,GADH,mBACvCV,EADuC,KAChCiB,EADgC,iDAI9C,4BAAAC,EAAA,+EAEsBC,IAAMC,IAAI,iBAFhC,OAEUC,EAFV,OAIIJ,EAAS,CACPf,KAAM,mBACNG,QAASgB,EAAIC,KAAKA,OANxB,gDASIL,EAAS,CACPf,KAAM,oBACNG,QAAS,KAAMkB,SAASD,KAAKb,QAXnC,0DAJ8C,kEAoB9C,WAAiCe,GAAjC,SAAAN,EAAA,+EAEUC,IAAMM,OAAN,wBAA8BD,IAFxC,OAIIP,EAAS,CACPf,KAAM,qBACNG,QAASmB,IANf,+CASIP,EAAS,CACPf,KAAM,oBACNG,QAAS,KAAMkB,SAASD,KAAKb,QAXnC,yDApB8C,kEAoC9C,WAA8BF,GAA9B,iBAAAW,EAAA,6DACQQ,EAAS,CACbC,QAAS,CACP,eAAgB,qBAHtB,kBAQsBR,IAAMS,KAAK,gBAAiBrB,EAAamB,GAR/D,OAQUL,EARV,OAUIJ,EAAS,CACPf,KAAM,kBACNG,QAASgB,EAAIC,KAAKA,OAZxB,gDAeIL,EAAS,CACPf,KAAM,oBACNG,QAAS,KAAMkB,SAASD,KAAKb,QAjBnC,0DApC8C,sBAyD9C,OACE,kBAACE,EAAckB,SAAf,CACEC,MAAO,CACL1B,aAAcJ,EAAMI,aACpBK,MAAOT,EAAMS,MACbN,QAASH,EAAMG,QACf4B,gBA/DwC,2CAgExCC,kBAhEwC,4CAiExCC,eAjEwC,8CAoEzCnB,ICjFMoB,EAAS,WACpB,IAAMC,EAAU,WAAO,IAKfC,EAJmBC,qBAAW1B,GAA5BP,aAEqBkC,KAAI,SAAA/B,GAAW,OAAIA,EAAYgC,UAEtCC,QAAO,SAACC,EAAKC,GAAN,OAAgBD,EAAOC,IAAO,GAAGC,QAAQ,GAEtE,OACE,6BACE,4CACA,kCAAQP,KAId,OACE,yBAAKQ,UAAU,OACb,uBAAGA,UAAU,SACX,gDAEF,uBAAGA,UAAU,cACX,kBAACT,EAAD,S,wCCbKU,EAAiB,WAAO,IAAD,EACRC,mBAAS,IADD,mBAC3BC,EAD2B,KACpBC,EADoB,OAENF,mBAAS,IAFH,mBAE3BP,EAF2B,KAEnBU,EAFmB,OAGVH,mBAAS,IAHC,mBAG3BI,EAH2B,KAGrBC,EAHqB,OAIVL,mBAAS,IAJC,mBAI3BM,EAJ2B,KAIrBC,EAJqB,KAM1BpB,EAAmBI,qBAAW1B,GAA9BsB,eAqBR,OACE,kBAAC,IAAD,CAAQqB,MAAO,CAAEC,OAAQ,IAAMC,SApBhB,SAAAC,GACfA,EAAEC,iBAEF,IAAMC,EAAiB,CACrBnC,GAAIoC,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBf,QACAR,QAASA,EACTW,OACAE,QAGFnB,EAAe0B,GAEfX,EAAS,IACTC,EAAU,GACVE,EAAQ,IACRE,EAAQ,MAKN,kBAACU,EAAA,EAAD,CAAWnB,UAAU,OACnB,kBAACoB,EAAA,EAAD,CAAKC,GAAI,GACP,kBAACC,EAAA,EAAD,CACEhE,KAAK,OACLiE,KAAK,QACL3C,GAAG,QACH4C,YAAY,QACZtC,MAAOiB,EACPsB,SAAU,SAAAZ,GAAC,OAAIT,EAASS,EAAEa,OAAOxC,YAIvC,kBAACiC,EAAA,EAAD,CAAWnB,UAAU,OACnB,kBAACoB,EAAA,EAAD,CAAKC,GAAI,GACP,kBAACC,EAAA,EAAD,CACEhE,KAAK,SACLiE,KAAK,SACL3C,GAAG,gBACH4C,YAAY,SACZtC,MAAOS,EACP8B,SAAU,SAAAZ,GAAC,OAAIR,EAAUQ,EAAEa,OAAOxC,YAIxC,kBAACiC,EAAA,EAAD,CAAWnB,UAAU,OACnB,kBAACoB,EAAA,EAAD,CAAKC,GAAI,GACP,kBAACC,EAAA,EAAD,CACEhE,KAAK,OACLiE,KAAK,OACL3C,GAAG,OACH4C,YAAY,OACZtC,MAAOoB,EACPmB,SAAU,SAAAZ,GAAC,OAAIN,EAAQM,EAAEa,OAAOxC,YAItC,kBAACiC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,GACP,2BACE/D,KAAK,OACLiE,KAAK,OACL3C,GAAG,OACH4C,YAAY,OACZtC,MAAOsB,EACPiB,SAAU,SAAAZ,GAAC,OAAIJ,EAAQI,EAAEa,OAAOxC,YAKtC,kBAACyC,EAAA,EAAD,CAAQrE,KAAK,SAASsE,MAAM,WAA5B,iB,gCCrFOC,EAAc,SAAC,GAAqB,IAAnBlE,EAAkB,EAAlBA,YACpByB,EAAsBK,qBAAW1B,GAAjCqB,kBAER,OACE,yBAAKY,UAAU,OACb,kBAAC8B,EAAA,EAAD,CACEpB,MAAO,CAAEqB,gBAAiB,cAAeH,MAAO,WAChD5B,UAAU,UAEV,kBAACgC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,4BAAKtE,EAAY6C,MACjB,4BAAK7C,EAAYwC,QAEnB,kBAAC+B,EAAA,EAAD,CAAUlC,UAAU,OAClB,uBAAGA,UAAU,SAAb,IAAuBrC,EAAY2C,MACnC,uBAAGN,UAAU,QAAQU,MAAO,CAAEyB,SAAU,SACrC,IADH,MAEMxE,EAAYgC,WAKxB,4BACEyC,QAAS,kBAAMhD,EAAkBzB,EAAYC,MAC7CoC,UAAU,mBACVU,MAAO,CACLkB,MAAO,MACPO,SAAU,OACVJ,gBAAiB,YANrB,OCtBOM,EAAkB,WAAO,IAAD,EACO5C,qBAAW1B,GAA7CP,EAD2B,EAC3BA,aAAc2B,EADa,EACbA,gBAOtB,OALAmD,qBAAU,WACRnD,MAEC,IAGD,oCACE,wBAAIa,UAAU,QACXxC,EAAakC,KAAI,SAAA/B,GAAW,OAC3B,kBAAC,EAAD,CAAa4E,IAAK5E,EAAYiB,GAAIjB,YAAaA,UCkB1C6E,MA3Bf,WACE,OACE,kBAAC,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,OAAK,EACLhC,MAAO,CAAEqB,gBAAiB,UAAWH,MAAO,gBAE5C,kBAACe,EAAA,EAAD,CAAWjC,MAAO,CAAEqB,gBAAiB,YACnC,kBAAC,EAAD,OAGF,yBAAK/B,UAAU,OACb,yBAAKA,UAAU,SACb,kBAAC,EAAD,OAEF,yBACEA,UAAU,QACVU,MAAO,CAAEqB,gBAAiB,UAAWa,aAAc,MAEnD,kBAAC,EAAD,WCfQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAhG,GACLiG,QAAQjG,MAAMA,EAAMkG,c","file":"static/js/main.6572401b.chunk.js","sourcesContent":["export default (state, action) => {\r\n  switch (action.type) {\r\n    case \"GET_TRANSACTIONS\":\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        transactions: action.payload\r\n      };\r\n    case \"DELETE_TRANSACTION\":\r\n      return {\r\n        ...state,\r\n        transactions: state.transactions.filter(\r\n          transaction => transaction._id !== action.payload\r\n        )\r\n      };\r\n    case \"ADD_TRANSACTION\":\r\n      return {\r\n        ...state,\r\n        transactions: [...state.transactions, action.payload]\r\n      };\r\n    case \"TRANSACTION_ERROR\":\r\n      return {\r\n        ...state,\r\n        error: action.payload\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React, { createContext, useReducer } from \"react\";\r\nimport AppReducer from \"./AppReducer\";\r\n\r\nimport axios from \"axios\";\r\n\r\n// Initial state\r\nconst initialState = {\r\n  transactions: [],\r\n  error: null,\r\n  loading: true\r\n};\r\n\r\n// Create context\r\nexport const GlobalContext = createContext(initialState);\r\n\r\n// Provider component\r\nexport const GlobalProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(AppReducer, initialState);\r\n\r\n  // Actions\r\n  async function getTransactions() {\r\n    try {\r\n      const res = await axios.get(\"/transactions\");\r\n\r\n      dispatch({\r\n        type: \"GET_TRANSACTIONS\",\r\n        payload: res.data.data\r\n      });\r\n    } catch (error) {\r\n      dispatch({\r\n        type: \"TRANSACTION_ERROR\",\r\n        payload: error.response.data.error\r\n      });\r\n    }\r\n  }\r\n\r\n  async function deleteTransaction(id) {\r\n    try {\r\n      await axios.delete(`/transactions/${id}`);\r\n\r\n      dispatch({\r\n        type: \"DELETE_TRANSACTION\",\r\n        payload: id\r\n      });\r\n    } catch (error) {\r\n      dispatch({\r\n        type: \"TRANSACTION_ERROR\",\r\n        payload: error.response.data.error\r\n      });\r\n    }\r\n  }\r\n\r\n  async function addTransaction(transaction) {\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      }\r\n    };\r\n\r\n    try {\r\n      const res = await axios.post(\"/transactions\", transaction, config);\r\n\r\n      dispatch({\r\n        type: \"ADD_TRANSACTION\",\r\n        payload: res.data.data\r\n      });\r\n    } catch (error) {\r\n      dispatch({\r\n        type: \"TRANSACTION_ERROR\",\r\n        payload: error.response.data.error\r\n      });\r\n    }\r\n  }\r\n  return (\r\n    <GlobalContext.Provider\r\n      value={{\r\n        transactions: state.transactions,\r\n        error: state.error,\r\n        loading: state.loading,\r\n        getTransactions,\r\n        deleteTransaction,\r\n        addTransaction\r\n      }}\r\n    >\r\n      {children}\r\n    </GlobalContext.Provider>\r\n  );\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport { GlobalContext } from \"../context/Globalstate\";\r\n\r\nexport const Header = () => {\r\n  const Balance = () => {\r\n    const { transactions } = useContext(GlobalContext);\r\n\r\n    const amounts = transactions.map(transaction => transaction.amount);\r\n\r\n    const total = amounts.reduce((acc, item) => (acc += item), 0).toFixed(2);\r\n\r\n    return (\r\n      <div>\r\n        <h4>Your Balance</h4>\r\n        <h1>Rs {total}</h1>\r\n      </div>\r\n    );\r\n  };\r\n  return (\r\n    <div className=\"row\">\r\n      <p className=\"col-9\">\r\n        <h2>Expense Tracker</h2>\r\n      </p>\r\n      <p className=\"col-3 ml-0\">\r\n        <Balance />\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState, useContext } from \"react\";\r\nimport { GlobalContext } from \"../context/Globalstate\";\r\n\r\nimport {\r\n  Form as BTForm,\r\n  FormGroup,\r\n  Input,\r\n  Col,\r\n  Button\r\n} from \"reactstrap\";\r\n\r\nexport const AddTransaction = () => {\r\n  const [title, setTitle] = useState(\"\");\r\n  const [amount, setAmount] = useState(\"\");\r\n  const [note, setNote] = useState(\"\");\r\n  const [date, setDate] = useState(\"\");\r\n\r\n  const { addTransaction } = useContext(GlobalContext);\r\n\r\n  const onSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    const newTransaction = {\r\n      id: Math.floor(Math.random() * 100000000),\r\n      title,\r\n      amount: +amount,\r\n      note,\r\n      date\r\n    };\r\n\r\n    addTransaction(newTransaction);\r\n\r\n    setTitle(\"\");\r\n    setAmount(0);\r\n    setNote(\"\");\r\n    setDate(\"\");\r\n  };\r\n\r\n  return (\r\n    <BTForm style={{ margin: 10 }} onSubmit={onSubmit}>\r\n      <FormGroup className=\"row\">\r\n        <Col sm={4}>\r\n          <Input\r\n            type=\"text\"\r\n            name=\"title\"\r\n            id=\"title\"\r\n            placeholder=\"Title\"\r\n            value={title}\r\n            onChange={e => setTitle(e.target.value)}\r\n          />\r\n        </Col>\r\n      </FormGroup>\r\n      <FormGroup className=\"row\">\r\n        <Col sm={4}>\r\n          <Input\r\n            type=\"number\"\r\n            name=\"amount\"\r\n            id=\"expenseAmount\"\r\n            placeholder=\"Amount\"\r\n            value={amount}\r\n            onChange={e => setAmount(e.target.value)}\r\n          />\r\n        </Col>\r\n      </FormGroup>\r\n      <FormGroup className=\"row\">\r\n        <Col sm={4}>\r\n          <Input\r\n            type=\"text\"\r\n            name=\"note\"\r\n            id=\"note\"\r\n            placeholder=\"Note\"\r\n            value={note}\r\n            onChange={e => setNote(e.target.value)}\r\n          />\r\n        </Col>\r\n      </FormGroup>\r\n      <FormGroup>\r\n        <Col sm={4}>\r\n          <input\r\n            type=\"date\"\r\n            name=\"date\"\r\n            id=\"date\"\r\n            placeholder=\"Date\"\r\n            value={date}\r\n            onChange={e => setDate(e.target.value)}\r\n          />\r\n        </Col>\r\n      </FormGroup>\r\n\r\n      <Button type=\"submit\" color=\"primary\">\r\n        ADD EXPENSE\r\n      </Button>\r\n    </BTForm>\r\n  );\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport { GlobalContext } from \"../context/Globalstate\";\r\nimport { Card, CardBody, CardText, CardTitle } from \"reactstrap\";\r\n\r\nexport const Transaction = ({ transaction }) => {\r\n  const { deleteTransaction } = useContext(GlobalContext);\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <Card\r\n        style={{ backgroundColor: \"floralwhite\", color: \"#2e0678\" }}\r\n        className=\"col-11\"\r\n      >\r\n        <CardBody>\r\n          <CardTitle>\r\n            <h6>{transaction.date}</h6>\r\n            <h3>{transaction.title}</h3>\r\n          </CardTitle>\r\n          <CardText className=\"row\">\r\n            <p className=\"col-8\"> {transaction.note}</p>\r\n            <p className=\"col-4\" style={{ fontSize: \"35px\" }}>\r\n              {\" \"}\r\n              Rs {transaction.amount}\r\n            </p>\r\n          </CardText>\r\n        </CardBody>\r\n      </Card>\r\n      <button\r\n        onClick={() => deleteTransaction(transaction._id)}\r\n        className=\"delete-btn col-1\"\r\n        style={{\r\n          color: \"red\",\r\n          fontSize: \"50px\",\r\n          backgroundColor: \"#2e0678\"\r\n        }}\r\n      >\r\n        x\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useContext, useEffect } from \"react\";\r\nimport { Transaction } from \"./transection\";\r\n\r\nimport { GlobalContext } from \"../context/Globalstate\";\r\n\r\nexport const TransactionList = () => {\r\n  const { transactions, getTransactions } = useContext(GlobalContext);\r\n\r\n  useEffect(() => {\r\n    getTransactions();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <ul className=\"list\">\r\n        {transactions.map(transaction => (\r\n          <Transaction key={transaction.id} transaction={transaction} />\r\n        ))}\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\nimport { Jumbotron, Container } from \"reactstrap\";\nimport { Header } from \"./component/Header\";\nimport { AddTransaction } from \"./component/AddTransection\";\nimport { TransactionList } from \"./component/List\";\n\nimport { GlobalProvider } from \"./context/Globalstate\";\n\nfunction App() {\n  return (\n    <GlobalProvider>\n      <Container\n        fluid\n        style={{ backgroundColor: \"#2e0678\", color: \"floralwhite\" }}\n      >\n        <Jumbotron style={{ backgroundColor: \"#2e0678\" }}>\n          <Header />\n        </Jumbotron>\n\n        <div className=\"row\">\n          <div className=\"col-7\">\n            <AddTransaction />\n          </div>\n          <div\n            className=\"col-5\"\n            style={{ backgroundColor: \"#2e0678\", marginBottom: \"5\" }}\n          >\n            <TransactionList />\n          </div>\n        </div>\n      </Container>\n    </GlobalProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}